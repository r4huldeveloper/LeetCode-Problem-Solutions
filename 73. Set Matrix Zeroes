// Brute force approach SPACE O(m+n) Time O(mn)
class Solution {
    public void setZeroes(int[][] matrix) {
       List<Integer> row = new ArrayList();
       List<Integer> col = new ArrayList();
       int m = matrix.length;
       int n = matrix[0].length;
       for(int i=0; i < m; i++){
           for(int j = 0; j < n; j++){
               if(matrix[i][j]==0){
                   row.add(i);
                   col.add(j);
               }
           }
       }
       for(int i = 0; i < row.size(); i++){
           for(int j = 0; j<n; j++){
               matrix[row.get(i)][j] = 0;
           }
       }
       for(int i = 0; i < col.size(); i++){
           for(int j=0; j < m; j++){
               matrix[j][col.get(i)] = 0;
           }
       }
    }
}

// Space Efficient O(1) Time complexity O(m*n)

class Solution {
    public void setZeroes(int[][] matrix) {
       boolean firstRow = false, firstCol = false;
       // Set markers in first row and first column
       for(int i = 0; i < matrix.length;i++){
           for(int j = 0; j < matrix[0].length; j++){
               if(matrix[i][j] == 0){
                   if(i == 0) firstRow = true;
                   if(j == 0) firstCol = true;
                   matrix[0][j] = 0;
                   matrix[i][0] = 0;
               }
           }
       }
       // working on inner matrix
       for(int i = 1; i < matrix.length; i++){
           for(int j = 1; j < matrix[0].length; j++){
               if(matrix[i][0] == 0 || matrix[0][j] == 0){
                   matrix[i][j] = 0;
               }
           }
       }

       // last checks for markers
       if(firstRow)
          for(int j = 0; j < matrix[0].length; j++){
              matrix[0][j] = 0;
          }
        if(firstCol)
          for(int i = 0; i < matrix.length; i++)
              matrix[i][0] = 0;
    }
}
