// TIME COMPLEXITY IS O(N^2)
// SPACE COMPLEXITY IS O(N)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        if(nums == null || nums.length < 3) return new ArrayList();
        // sort the elements
        Arrays.sort(nums);
        Set<List<Integer>> res = new HashSet();
        //Fix the first element
        for(int i = 0; i < nums.length - 2; i++){
            // OTHER TWO ELEMENT USING TWO-SUM
            int left = i+1;
            int right = nums.length - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                if(sum == 0){
                    res.add(Arrays.asList(nums[i] , nums[left] , nums[right]));
                    left++; right--;
                } else if(sum < 0){
                    left++;
                } else{
                    right--;
                }
            }
        }
        return new ArrayList(res);
    }
}
