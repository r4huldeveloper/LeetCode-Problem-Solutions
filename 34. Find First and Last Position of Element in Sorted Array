// Time O(N) and Space O(1)

class Solution {
    int first = -1;
    int last = -1;
    public int[] searchRange(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
          if(nums[i] == target){
              if(first == -1){
                  first = i;
              }
              last = i;
          }
           
        }
        return new int[]{first,last};
    }
}

// Time O(N) and Space O(1)

class Solution {

    // leftBound
public int leftBound(int nums[],int target){
    int index = -1, low = 0, high = nums.length - 1;
    
    while(low <= high){
        int mid = low + (high-low) / 2;
        if(nums[mid] == target){
          index = mid;
          high = mid - 1;
        } else if(nums[mid] < target){
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return index; 
}

    // RightBound
public int rightBound(int nums[],int target){
    int index = -1, low = 0, high = nums.length - 1;
    
    while(low <= high){
        int mid = low +(high-low) / 2;
        if(nums[mid] == target){
            index = mid;
            low = mid + 1;
        } else if(nums[mid] < target){
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return index;
}
    public int[] searchRange(int[] nums, int target) {
       int left = leftBound(nums,target);
       int right = rightBound(nums,target);

       return new int[]{left,right};
    }
}
