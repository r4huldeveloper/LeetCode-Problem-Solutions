// 1st approach

long sumPower = 0;
        for (int power : batteries)
            sumPower += power;
        long left = 1, right = sumPower / n;
        
        while (left < right){
            long target = right - (right - left) / 2;
            long extra = 0;
            
            for (int power : batteries)
                extra += Math.min(power, target);

            if (extra >= (long)(n * target))
                left = target;
            else
                right = target - 1;
        }
        return left;

// 2nd Approach

class Solution {

    private boolean canFit(int n, long timeSpan, int[] batteries){
        long currBatSum = 0;
        long targetBatSum = n * timeSpan;
        for(int bat : batteries){
            if(bat < timeSpan){
                currBatSum += bat;
            } else {
                currBatSum += timeSpan;
            }
            if(currBatSum >= targetBatSum){
                return true;
            }
        }
        return currBatSum >= targetBatSum;
    }
    public long maxRunTime(int n, int[] batteries) {
        long totalSum = 0;
        long low = 0;
        for(int bat : batteries){
            totalSum += bat;
            low = Math.min(bat,low);
        }
        long high = (totalSum / n) + 1;
        long ans = -1;
        // binary search
        while(low < high){
            long mid = low + (high - low) / 2;
            if(canFit(n,mid,batteries)){
                ans = mid;
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return ans;
    }
}

