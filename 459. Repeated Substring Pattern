// Time complexity O(n root n)
// Space complexity O(n)

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();
        for(int i = 1; i <= n/2; i++){
            if(n%i == 0){
                StringBuilder pattern = new StringBuilder();
                for(int j = 1; j <= n / i; j++){
                    pattern.append(s.substring(0,i));
                }
                if(s.equals(pattern.toString())) return true;
            }
        }
        return false;
    }
}
