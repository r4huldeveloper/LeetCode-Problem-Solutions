// BRUTE FORCE APPROACH

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] == target - nums[j]){
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }
}
-------------------------------------------

// EFFICIENT APPROACH (HASH TABLE)

class Solution {
    public int[] twoSum(int[] nums, int target) {
     // Fill the HashMap
     Map<Integer,Integer> map = new HashMap();
     for(int i = 0; i < nums.length; i++){
         map.put(nums[i],i);
     }
     for(int i = 0 ; i < nums.length; i++){
         int left = target - nums[i];
         if(map.containsKey(left) && map.get(left) != i){  // map.get(left) gives the value of left
             return new int[]{i,map.get(left) };
         }
     }
     return null;
    }
}

-------------------------------------

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i],i);
        }
        for(int i = 0; i < nums.length; i++){
            int num = nums[i];  // num = 2;
            int rem = target - num;
            if(map.containsKey(rem) ){
                int index = map.get(rem);
                if(index == i) continue;
                return new int[]{i,index};
            }
        }
        return null;
    }
}
