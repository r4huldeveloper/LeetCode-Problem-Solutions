  //Brute force approach 
  // TIME COMPLEXITY IS O(n^2)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] == nums[j]){
                    count++;
                }
            }
        }
        return count;
    }
}

// OPTIMIZE APPROACH (n * (n - 1)) / 2
// TIME COMPLEXITY IS O(N) AND SPACE O(1)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int result = 0;
        int[] countArray = new int[101];
        for(int num : nums){
            countArray[num]++;
        }
        for(int count : countArray){
            count = (count * (count - 1)) / 2;
            result += count;
        }
        return result;
    }
}

